package com.earthquake.api.service.admin;

import com.earthquake.api.constant.Constant;
import com.earthquake.api.entity.AdminEntity;
import com.earthquake.api.entity.EmailStatusEntity;
import com.earthquake.api.entity.ServiceUsageEntity;
import com.earthquake.api.entity.UserEntity;
import com.earthquake.api.exception.TokenException;
import com.earthquake.api.model.StatusCountModel;
import com.earthquake.api.repository.AdminRepository;
import com.earthquake.api.repository.EmailStatusRepository;
import com.earthquake.api.repository.ServiceUsageRepository;
import com.earthquake.api.repository.UserRepository;
import com.earthquake.api.request.admin.*;
import com.earthquake.api.response.admin.*;
import com.earthquake.api.service.config.ConfigAddOrUpdateService;
import com.earthquake.api.service.hash.PasswordService;
import com.earthquake.api.service.logger.EarthQuakeLoggerService;
import com.earthquake.api.service.mail.MailService;
import com.earthquake.api.shared.util.UniqueIdGenerator;
import com.earthquake.api.type.AdminSaveStatusType;
import com.earthquake.api.type.ServiceUsageStatusType;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Created by Semih, 12.02.2021
 * <p>github: <a href="https://github.com/SemihSz ">
 */
@Service
@Slf4j
public class AdminServiceImp implements AdminService {

    private final EarthQuakeLoggerService loggerService;

    private final String adminToken;

    private final String secondAdminToken;

    private final EmailStatusRepository emailStatusRepository;

    private final UserRepository userRepository;

    private final ServiceUsageRepository usageRepository;

    private final PasswordService passwordService;

    private final AdminRepository adminRepository;

    private final MessageSource messageSource;

    private final MailService mailService;

    private final ConfigAddOrUpdateService configAddOrUpdateService;

    public AdminServiceImp(EarthQuakeLoggerService loggerService, @Value("${admin-privilege.token}") String adminToken, @Value("${admin-privilege.second-token}") String secondAdminToken,
                           EmailStatusRepository emailStatusRepository, UserRepository userRepository, ServiceUsageRepository usageRepository,
                           PasswordService passwordService, AdminRepository adminRepository, MessageSource messageSource, MailService mailService,
                           ConfigAddOrUpdateService configAddOrUpdateService) {
        this.loggerService = loggerService;
        this.adminToken = adminToken;
        this.secondAdminToken = secondAdminToken;
        this.emailStatusRepository = emailStatusRepository;
        this.userRepository = userRepository;
        this.usageRepository = usageRepository;
        this.passwordService = passwordService;
        this.adminRepository = adminRepository;
        this.messageSource = messageSource;
        this.mailService = mailService;
        this.configAddOrUpdateService = configAddOrUpdateService;
    }

    @Override
    public AdminEmailStatusResponse emailListStatus(AdminEmailRequest request) {

        loggerService.requestLogging(request, Constant.Request.ADMIN_EMAIL_STATUS_REQUEST);

        controlAdminToken(request.getAdminToken(), request.getSecondToken(), request.getConfirmationToken(), request.getUserEmail());

        List<EmailStatusEntity> statusList = new ArrayList<>();
        emailStatusRepository.findAll().forEach(statusList::add);

        return AdminEmailStatusResponse.builder()
                .emailStatusList(statusList)
                .build();
    }

    @SneakyThrows
    private void controlAdminToken(String firstToken, String secondToken, String confirmToken, String userEmail) {

        // Admin Second token control
        final AdminEntity adminControl = adminRepository.userControl(userEmail);

        final boolean matchedFirstToken = passwordService.validatePassword(firstToken, adminControl.getFirstTokenHash());
        final boolean matchedSecondToken = passwordService.validatePassword(secondToken, adminControl.getSecondTokenHash());
        final boolean matchedConfirmToken = passwordService.validatePassword(confirmToken, adminControl.getAutoGeneratedTokenHash());

        if (LocalDateTime.now().compareTo(adminControl.getCrtDate().plusMinutes(30)) >= 0) {
            throw new RuntimeException("Token Expired: " + adminControl.getCrtDate());
        }

        final String generatedSecuredPasswordHash = passwordService.generatePasswordHash(this.adminToken);
        final boolean matched = passwordService.validatePassword(adminToken, generatedSecuredPasswordHash);
        if (!matched || !matchedFirstToken || !matchedSecondToken || !matchedConfirmToken) {
            throw new RuntimeException("Token Wrong: " + adminToken);
        }
    }


    @Override
    public AdminUserResponse showUsers(AdminUserRequest request) {

        loggerService.requestLogging(request, Constant.Request.ADMIN_SHOW_USERS);
        controlAdminToken(request.getAdminToken(), request.getSecondToken(), request.getConfirmationToken(), request.getUserEmail());

        List<UserEntity> userList = new ArrayList<>();
        userRepository.findAll().forEach(userList::add);

        return AdminUserResponse.builder()
                .userList(userList)
                .build();
    }


    @Override
    public AdminUserResponse filterUsers(AdminUserRequest request) {

        loggerService.requestLogging(request, Constant.Request.ADMIN_FILTER_USERS);
        controlAdminToken(request.getAdminToken(), request.getSecondToken(), request.getConfirmationToken(), request.getUserEmail());

        List<UserEntity> userList = new ArrayList<>();
        userRepository.findAll().forEach(userList::add);

        userList = userList.stream()
                .filter(t -> {
                    if (Objects.nonNull(request.getIsSendEmailActive())) {
                        return t.getIsSendEmailActive().equals(request.getIsSendEmailActive());
                    }
                    return true;
                })
                .filter(t -> {
                    if (Objects.nonNull(request.getAllDataExcelSheetActive())) {
                        return t.getAllDataExcelSheetActive().equals(request.getAllDataExcelSheetActive());
                    }
                    return true;
                })
                .filter(t -> {
                    if (Objects.nonNull(request.getIsHighestEarthQuakeActive())) {
                        return t.getIsHighestEarthQuakeActive().equals(request.getIsHighestEarthQuakeActive());
                    }
                    return true;
                })
                .filter(t -> {
                    if (Objects.nonNull(t.getInstitutionType())) {
                        return t.getInstitutionType().equals(request.getInstitutionType());
                    }
                    return true;
                })
                .collect(Collectors.toList());

        return AdminUserResponse.builder()
                .userList(userList)
                .build();
    }

    @Override
    public AdminServiceUsageResponse serviceUsage(AdminServiceUsageRequest request) {

        final Set<String> serviceNameList = new HashSet<>();
        usageRepository.findAll().forEach(t -> {
            serviceNameList.add(t.getServiceName());
        });

        final Map<String, StatusCountModel> statusServiceResponse = new HashMap<>();

        serviceNameList.forEach(t -> {

            final List<ServiceUsageEntity> serviceUsageEntityList = usageRepository.serviceName(t);

            final ServiceUsageEntity success = serviceUsageEntityList.stream()
                    .filter(s -> ServiceUsageStatusType.SUCCESS.equals(s.getStatus())).findFirst().orElse(null);

            final ServiceUsageEntity fail = serviceUsageEntityList.stream()
                    .filter(s -> ServiceUsageStatusType.FAIL.equals(s.getStatus())).findFirst().orElse(null);

            final StatusCountModel statusCountModel = StatusCountModel.builder()
                    .success(Objects.nonNull(success) ? success.getCount() : 0L)
                    .fail(Objects.nonNull(fail) ? fail.getCount() : 0L)
                    .build();

            statusServiceResponse.put(t, statusCountModel);

        });

        return AdminServiceUsageResponse.builder().usageResponse(statusServiceResponse).build();
    }

    @Override
    public AdminConfigResponse configAddOrUpdate(AdminConfigRequest request) {

        controlAdminToken(request.getAdminToken(), request.getSecondToken(), request.getConfirmationToken(), request.getUserEmail());

        return configAddOrUpdateService.apply(request);
    }

    @SneakyThrows
    @Override
    public AdminSaveResponse saveAdmin(AdminSaveRequest request) {

        final AdminEntity adminControl = adminRepository.userControl(request.getUserEmail());

        if (Objects.isNull(adminControl)) {

            final String hashAdminToken = passwordService.generatePasswordHash(this.adminToken);
            final String hashAdminSecondToken = passwordService.generatePasswordHash(this.secondAdminToken);
            final boolean matchedAdminToken = passwordService.validatePassword(request.getFirstToken(), hashAdminToken);
            final boolean matchedSecondAdminToken = passwordService.validatePassword(request.getSecondToken(), hashAdminSecondToken);

            if (Objects.nonNull(request.getFirstToken()) && Objects.nonNull(request.getSecondToken())
                    && matchedAdminToken && matchedSecondAdminToken
                    && Objects.nonNull(request.getPassword()) && Objects.nonNull(request.getConfirmPassword())
                    && request.getPassword().length() > 5 && request.getConfirmPassword().length() > 5
                    && (request.getPassword().length() == request.getConfirmPassword().length())
                    && Objects.nonNull(request.getUserEmail())) {

                final String passwordHash = passwordService.generatePasswordHash(request.getPassword());
                final String confirmPasswordHash = passwordService.generatePasswordHash(request.getConfirmPassword());

                final boolean matchedPassword = passwordService.validatePassword(request.getPassword(), passwordHash);
                final boolean matchedConfirmPassword = passwordService.validatePassword(request.getConfirmPassword(), confirmPasswordHash);
                final boolean controlConfirmPasswordHash = passwordService.validatePassword(request.getConfirmPassword(), passwordHash);

                if (matchedPassword && matchedConfirmPassword && controlConfirmPasswordHash) {

                    final String autoGeneratedToken = UniqueIdGenerator.generateRandom();
                    log.info("<---- Auto Generated Token: {} ---->", autoGeneratedToken);


                    final SendAdminEmailRequest adminEmailRequest = SendAdminEmailRequest.builder().email(request.getUserEmail()).build();

                    final int responseTokenMail = mailService.sendAuthenticationTokenViaMail(adminEmailRequest, autoGeneratedToken);

                    if (responseTokenMail == 200) {

                        final String autoGeneratedTokenHash = passwordService.generatePasswordHash(autoGeneratedToken);
                        log.info("<---- Auto Generated Hash: {} ---->", autoGeneratedTokenHash);

                        final AdminEntity adminEntity = AdminEntity.builder()
                                .userEmail(request.getUserEmail())
                                .passwordHash(passwordHash)
                                .confirmPasswordHash(confirmPasswordHash)
                                .firstTokenHash(hashAdminToken)
                                .secondTokenHash(hashAdminSecondToken)
                                .crtDate(LocalDateTime.now())
                                .autoGeneratedTokenHash(autoGeneratedTokenHash)
                                .status(AdminSaveStatusType.NEW)
                                .build();

                        adminRepository.save(adminEntity);

                        return AdminSaveResponse.builder()
                                .statusType(AdminSaveStatusType.NEW)
                                .build();

                    }
                    else {
                        throw new TokenException(messageSource.getMessage("Send Token Error", null, Locale.ENGLISH));
                    }

                } else {

                    log.error("Password match error!.");
                }
            }
        } else {
            // It is not possible
            log.error("This email has existed to the user. You have to change with different email.");
        }

        return null;
    }

    @Override
    public AdminSaveResponse updateAdmin(AdminSaveRequest request) {
        return null;
    }

    @SneakyThrows
    @Override
    public AdminSaveResponse loginAdmin(AdminLoginRequest request) {

        final AdminEntity adminControl = adminRepository.userControl(request.getUserEmail());

        if (Objects.nonNull(adminControl)) {

            final String autoGeneratedTokenHash = passwordService.generatePasswordHash(request.getConfirmationToken());

            final boolean matchedAdminToken = passwordService.validatePassword(request.getFirstToken(), adminControl.getFirstTokenHash());
            final boolean matchedSecondAdminToken = passwordService.validatePassword(request.getSecondToken(), adminControl.getSecondTokenHash());

            if (Objects.nonNull(request.getFirstToken()) && Objects.nonNull(request.getSecondToken())
                    && matchedAdminToken && matchedSecondAdminToken
                    && Objects.nonNull(request.getPassword()) && Objects.nonNull(request.getConfirmPassword())
                    && request.getPassword().length() > 5 && request.getConfirmPassword().length() > 5
                    && (request.getPassword().length() == request.getConfirmPassword().length())
                    && Objects.nonNull(request.getUserEmail())
                    && Objects.nonNull(autoGeneratedTokenHash)) {

                final String passwordHash = passwordService.generatePasswordHash(request.getPassword());
                final String confirmPasswordHash = passwordService.generatePasswordHash(request.getConfirmPassword());

                final boolean matchedPassword = passwordService.validatePassword(request.getPassword(), passwordHash);
                final boolean matchedConfirmPassword = passwordService.validatePassword(request.getConfirmPassword(), confirmPasswordHash);
                final boolean matchedConfirmPasswordHash = passwordService.validatePassword(request.getConfirmPassword(), passwordHash);
                final boolean controlPassword = passwordService.validatePassword(request.getPassword(), adminControl.getPasswordHash());
                final boolean controlConfirmPassword = passwordService.validatePassword(request.getConfirmPassword(), adminControl.getConfirmPasswordHash());


                if (LocalDateTime.now().compareTo(adminControl.getCrtDate().plusMinutes(30)) >= 0) {

                    log.info("<---- Generated new token for admin ---->");

                    final String autoGeneratedToken = UniqueIdGenerator.generateRandom();
                    log.info("<---- Auto Generated Token: {} ---->", autoGeneratedToken);


                    final SendAdminEmailRequest adminEmailRequest = SendAdminEmailRequest.builder().email(adminControl.getUserEmail()).build();

                    final int responseTokenMail = mailService.sendAuthenticationTokenViaMail(adminEmailRequest, autoGeneratedToken);

                    if (responseTokenMail == 200) {

                        final String newAutoGeneratedTokenHash = passwordService.generatePasswordHash(autoGeneratedToken);
                        log.info("<---- Auto Generated Hash: {} ---->", newAutoGeneratedTokenHash);

                        adminControl.setAutoGeneratedTokenHash(newAutoGeneratedTokenHash);
                        adminControl.setCrtDate(LocalDateTime.now());
                        adminRepository.save(adminControl);

                    }

                    throw new TokenException(messageSource.getMessage(Constant.Message.ADMIN_TOKEN_EXPIRE, null, Locale.ENGLISH));
                }

                if (matchedPassword && matchedConfirmPassword && matchedConfirmPasswordHash && controlPassword && controlConfirmPassword) {

                    adminControl.setStatus(AdminSaveStatusType.SUCCESS);
                    adminRepository.save(adminControl);

                    log.info("Enter The Admin Successfully!");

                    return AdminSaveResponse.builder()
                            .statusType(AdminSaveStatusType.SUCCESS)
                            .build();

                }
                else {

                    log.error("Wrong Entering Information");

                    return AdminSaveResponse.builder()
                            .statusType(AdminSaveStatusType.FAIL)
                            .build();
                }

            }
        }

        return null;
    }
}
